#!/usr/bin/env ruby
# frozen_string_literal: true
require "#{Dir.home}/lib/optimist.rb"
require "json"

module TestThat
  class ConfigFile
    attr_reader :filename

    def initialize(filename)
      @filename = filename
    end

    def options
      if filename && File.exist?(filename)
        symbolize_keys(JSON.parse(File.read(filename)))
      else
        {}
      end
    end

    private

    def symbolize_keys(hash)
      hash
        .transform_keys { |k| k.to_sym }
        .transform_values { |v| v.is_a?(Hash) ? symbolize_keys(v) : v }
    end
  end

  class ChangedFiles
    attr_reader :include_branch_commits

    def initialize(include_branch_commits)
      @include_branch_commits = include_branch_commits
    end

    def files
      content = if include_branch_commits
        `git-changed-files --include-branch-commits | related-files --stdin`
      else
        `git-changed-files | related-files --stdin`
      end
      content.split.map(&:strip)
    end
  end

  module TestHarness
    class Ruby
      REQUIRE_ALL_TESTS = '-e "Dir.glob(\"**/*_test.rb\", base: \"test\"){|f| require f}"'
      REQUIRE_EACH_TEST = '-e "ARGV.each{|f| require f}"'

      def enabled?
        File.directory?("test")
      end

      def select_tests(files)
        files.flat_map { |f| Dir.exist?(f) ? Dir.glob(File.join(f, "**/*_test.rb").to_s) : f }.grep(%r{^test/.*_test\.rb$})
      end

      def test_all_command
        ["ruby", "-Itest", REQUIRE_ALL_TESTS].join(" ")
      end

      def test_failed_command
        puts "Re-running failures not available for this test harness"
        "false"
      end

      def test_files_command(files)
        files_relative_to_test_dir = files.map { |f| f.sub(%r{\Atest/}, "") }
        ["ruby", "-Itest", REQUIRE_EACH_TEST, *files_relative_to_test_dir].join(" ")
      end
    end

    class Rails
      def enabled?
        File.directory?("test") && File.exist?("config/application.rb")
      end

      def select_tests(files)
        files.grep(%r{^test/.*_test\.rb$})
      end

      def test_all_command
        "rails test"
      end

      def test_failed_command
        puts "Re-running failures not available for this test harness"
        "false"
      end

      def test_files_command(files)
        ["rails", "test", *files].join(" ")
      end
    end

    class Rspec
      def enabled?
        File.directory?("spec")
      end

      def select_tests(files)
        files.flat_map { |f| Dir.exist?(f) ? Dir.glob(File.join(f, "**/*_spec.rb").to_s) : f }.grep(%r{^spec/.*_spec\.rb(:\d+)?$})
      end

      def test_all_command
        "rspec"
      end

      def test_failed_command
        "rspec --only-failures"
      end

      def test_files_command(files)
        ["rspec", *files].join(" ")
      end
    end

    class Override
      def initialize(config, base)
        @config = config
        @base = base
      end

      def enabled?
        @base.enabled?
      end

      def select_tests(files)
        @base.select_tests(files)
      end

      def test_all_command
        command(:all) || @base.test_all_command
      end

      def test_failed_command
        command(:failed) || @base.test_failed_command
      end

      def test_files_command(files)
        command(:files)&.sub("FILES", files.join(" ")) || @base.test_files_command(files)
      end

      private

      def command(command)
        @config[:commands][command]
      end
    end
  end

  module CommandRunner
    class Execute
      def run(command)
        exec(command)
      end
    end

    class DryRun
      def run(command)
        puts command
      end
    end
  end

  class Tester
    class Basic
      attr_reader :test_harness
      attr_reader :command_runner

      def initialize(test_harness, command_runner)
        @test_harness = test_harness
        @command_runner = command_runner
      end

      def run(command)
        command_runner.run(command)
      end
    end

    class All < Basic
      def test
        run(test_harness.test_all_command)
      end
    end

    class Failed < Basic
      def test
        run(test_harness.test_failed_command)
      end
    end

    class Selected < Basic
      attr_reader :tests_to_run

      def initialize(test_harness, command_runner, tests_to_run)
        super(test_harness, command_runner)
        @tests_to_run = tests_to_run
      end

      def test
        run(test_harness.test_files_command(tests_to_run))
      end
    end

    class VerboseSelected < Selected
      def test
        print_tests
        super
      end

      private

      def print_tests
        puts "Running tests for:"
        tests_to_run.each { |f| puts "  #{f}" }
      end
    end

    class Empty < Tester
      def test
        puts "No tests to run"
        true
      end
    end

    class Error < Tester
      def test
        warn "Could not run tests; no compatible test environment detected"
        false
      end
    end
  end

  class TestBuilder
    class << self
      def build(options)
        new(options).build
      end
    end

    attr_reader :options

    def initialize(options)
      @options = options
      @options = ConfigFile.new(options[:config_file]).options.merge(options)
    end

    def build
      if no_test_harness?
        Tester::Error.new
      elsif test_all?
        Tester::All.new(test_harness, command_runner)
      elsif test_failed?
        Tester::Failed.new(test_harness, command_runner)
      elsif selected_tests.any?
        Tester::Selected.new(test_harness, command_runner, selected_tests)
      elsif changed_tests.any?
        Tester::VerboseSelected.new(test_harness, command_runner, changed_tests)
      else
        Tester::Empty.new
      end
    end

    private

    def no_test_harness?
      test_harness.nil?
    end

    def test_all?
      options[:all]
    end

    def test_failed?
      options[:failed]
    end

    def dry_run?
      options[:dry_run]
    end

    def selected_tests
      @selected_tests ||= test_harness.select_tests(options[:tests])
    end

    def changed_tests
      @changed_tests ||= begin
        files = ChangedFiles.new(options[:include_branch_commits]).files
        test_harness.select_tests(files)
      end
    end

    def test_harness
      @test_harness ||= begin
        harness = test_harnesses.detect(&:enabled?)
        harness = TestHarness::Override.new(options[:override], harness) if options[:override]
        harness
      end
    end

    def command_runner
      if dry_run?
        CommandRunner::DryRun.new
      else
        CommandRunner::Execute.new
      end
    end

    def test_harnesses
      [
        TestHarness::Rails.new,
        TestHarness::Ruby.new,
        TestHarness::Rspec.new
      ]
    end
  end
end

options = Optimist.options do
  opt :all, "Run all tests"
  opt :dry_run, "Print out test command instead of executing it"
  opt :failed, "Run previously failed tests"
  opt :include_branch_commits, "Include branch commits when finding changed files", short: "b"
  opt :config_file, "Read config from file", default: ".test_that.json"
end

TestThat::TestBuilder.build(options.merge(tests: ARGV)).test
