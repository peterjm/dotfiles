#!/usr/bin/env ruby

require_relative "../lib/elgato/api_client"
require 'optparse'

class Parser
  attr_reader :program_name, :options

  def initialize(program_name)
    @program_name = program_name
    @options = {}
  end

  def parse(args)
    opt_parser.parse!(args)
    return options
  end

  def to_s
    opt_parser.to_s
  end

  def opt_parser
    @opt_parser ||= OptionParser.new do |opts|
      opts.banner = "Usage: #{program_name} [options]"

      opts.on("-h", "--help", "Prints this help message") do
        options[:help] = true
      end

      opts.on("-T", "--toggle", "Toggle whether the lights are on or off") do
        options[:toggle] = true
      end

      opts.on("-o", "--on", "Turn the light on") do
        options[:on] = true
      end

      opts.on("-O", "--off", "Turn the light off") do
        options[:on] = false
      end

      opts.on("-d", "--defaults", "Set to default values") do
        options[:brightness] = ENV["ELGATO_DEFAULT_BRIGHTNESS"].to_i
        options[:temperature] = ENV["ELGATO_DEFAULT_TEMPERATURE"].to_i
      end

      b_message = "Set the brightness (%d to %d)" % [Elgato::Light.min_brightness, Elgato::Light.max_brightness]
      opts.on("-bBRIGHTNESS", "--brightness=BRIGHTNESS", b_message) do |brightness|
        options[:brightness] = brightness.to_i
      end

      t_message = "Set the temperature (%d to %d)" % [Elgato::Light.min_temperature, Elgato::Light.max_temperature]
      opts.on("-tTEMPERATURE", "--temperature=TEMPERATURE", t_message) do |temperature|
        options[:temperature] = temperature.to_i
      end
    end
  end
end

filename = File.basename(__FILE__)
parser = Parser.new(filename)
options = parser.parse(ARGV)

if options.delete(:help)
  puts parser
  exit
end

begin
  api_client = Elgato::ApiClient.new(ip_address: ENV["ELGATO_IP_ADDRESS"])
  if options.delete(:toggle)
    if options.any?
      STDERR.puts "Toggle is not compatible with setting other options."
      puts parser
      exit 1
    end

    api_client.toggle
  else
    api_client.set(**options.slice(:on, :brightness, :temperature))
  end
rescue Elgato::Error => e
  STDERR.puts e.message
  exit 1
end
