#!/usr/bin/env ruby

require "#{Dir.home}/lib/optimist.rb"
require 'json'

class RelatedFileFinder
  attr_reader :pattern_map

  class Pattern
    attr_reader :regexp, :related_file_pattern

    def initialize(regexp, related_file_pattern)
      @regexp = regexp
      @related_file_pattern = related_file_pattern
    end

    def match(file)
      match = regexp.match(file)
      yield build_related_file_glob(match) if match
    end

    private

    def build_related_file_glob(match)
      related_file_pattern.gsub(/\$(\d+)/) { |matched_param| match[$1.to_i] }
    end
  end

  def initialize
    @pattern_map = Hash.new { |h,k| h[k] = [] }
  end

  def load_config(filename)
    return unless File.exist?(filename)

    config = JSON.parse(File.read(filename))
    config.each do |p|
      pattern_map[p["src"]] << p["dest"]
    end
  end

  def related_files(file)
    return [] unless File.exist?(file)

    patterns.each_with_object([file]) do |pattern, related|
      pattern.match(file) do |related_file_glob|
        related.concat(Dir.glob(related_file_glob))
      end
    end
  end

  private

  def patterns
    @patterns ||= pattern_map.flat_map do |regexp_str, related_list|
      regexp = Regexp.new(regexp_str)
      related_list.map { |related| Pattern.new(regexp, related) }
    end
  end
end

def load_files_from_stdin
  $stdin.stat.pipe? ? $stdin.readlines(chomp: true) : []
end

options = Optimist.options do
  opt :stdin, "Read list of files from stdin"
  opt :number, "The number of related files to return", type: :integer
  opt :workspace, "The base directory for parsing the files", type: :string
  opt :exclude_self, "Whether to include the file itself in the list of related files"
end

finder = RelatedFileFinder.new
finder.load_config(File.join(Dir.home, ".related_files_mapping.json"))
finder.load_config(".related_files_mapping.json")

files = options[:stdin] ? load_files_from_stdin : ARGV
Dir.chdir(options[:workspace]) if options[:workspace]

related_files = files.flat_map { |file| finder.related_files(file) }.uniq
related_files -= files if options[:exclude_self]
related_files = related_files.take(options[:number]) if options[:number]

related_files.each { |file| puts file }
