set nocompatible

" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" Declare the list of plugins.
Plug 'tpope/vim-sensible'
Plug 'mileszs/ack.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'janko/vim-test'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'peterjm/gitignore.vim'
Plug 'vim-scripts/localvimrc'
Plug 'tpope/vim-fugitive'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

" Colour Schemes
Plug 'nanotech/jellybeans.vim'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

set background=dark             " indicates that I use a dark background
silent! colorscheme jellybeans
set visualbell                  " disable audible bell
let mapleader = ","             " map <Leader> to command

set showcmd                     " display incomplete commands
set number
set cursorline                  " highlight the current line
set list                        " show invisible characters

set noswapfile                  " don't save swap files

set splitright                  " open new splits to the right
set splitbelow                  " ... and bottom

"" Whitespace
set wrap
set linebreak                   " soft-wrap lines at word boundaries
set showbreak=+                 " symbol to display in front of wrapped lines
set tabstop=2 shiftwidth=2      " a tab is two spaces
set expandtab                   " use spaces, not tabs

set textwidth=120               " number of columns before linewrap
set colorcolumn=+1              " highlight the column that code shouldn't extend beyond
hi ColorColumn guibg=#2d2d2d ctermbg=246

"" Searching
set nohlsearch                  " don't highlight search matches
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

set pastetoggle=<F10>           " F10 to toggle paste mode

" also update the list in .ignore_for_fzf
set wildignore+=*.gif,*.png,*.jpg,*.jpeg,*.bmp,*.tiff,*.psd,*.svg,*.woff,*.woff2,*.eot,*.ttf

if has("autocmd")
  "" Filetypes
  autocmd BufRead,BufNewFile *.rabl setf ruby
  autocmd BufRead,BufNewFile *.god setf ruby
  " use set filetype to override default
  autocmd BufRead,BufNewFile *.htm.erb set filetype=html.eruby
  autocmd BufRead,BufNewFile *.json setf javascript
  autocmd BufRead,BufNewFile *.json.erb setf javascript.eruby
  autocmd BufRead,BufNewFile *.json.jbuilder setf ruby
  autocmd BufRead,BufNewFile *.ejs setf javascript
  autocmd BufRead,BufNewFile *.go setf go
  " File types that require tabs, not spaces
  autocmd FileType make set noexpandtab
  autocmd FileType python set noexpandtab

  " Manage whitespace on save, maintaining cursor position
  function! ClearTrailingWhitespace()
    let g:clearwhitespace = exists('g:clearwhitespace') ? g:clearwhitespace : 1
    if g:clearwhitespace
      let save_cursor = getpos(".")
      :silent! %s/\s\+$//e " clear trailing whitespace at the end of each line
      :silent! %s/\($\n\)\+\%$// " clear trailing newlines
      call setpos('.', save_cursor)
    endif
  endfunction
  autocmd FileType ruby,haml,eruby,javascript,coffee,handlebars,yaml autocmd BufWritePre <buffer> call ClearTrailingWhitespace()

  " Manage whitespace on save, maintaining cursor position
  function! ConvertTabsToSpaces()
    let g:tabtospace = exists('g:tabtospace') ? g:tabtospace : 1
    if g:tabtospace
      let save_cursor = getpos(".")
      :silent! %s/\t/  /eg " clear trailing newlines
      call setpos('.', save_cursor)
    endif
  endfunction
  autocmd FileType ruby,haml,eruby,javascript,coffee,handlebars,yaml autocmd BufWritePre <buffer> call ConvertTabsToSpaces()

  " Remember last location in file, but not for commit messages. (see :help last-position-jump)
  autocmd BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
endif

" shortcut to re-source .vimrc
map :src :source<space>$MYVIMRC

" tab completion
imap <Tab> <C-N>

"allows you to use . command in visual mode; harmless otherwise
vnoremap . :normal.<CR>

" shortcut to use the 'q' macro
nmap <space> @q

"" Plugins

" Ack
nmap <leader>f :Ack<space>

if executable('ag')
  " use ag instead of grep, if available
  set grepprg=ag\ --nogroup\ --nocolor

  " use ag instead of ack, if available
  let g:ackprg = 'ag --nogroup --column'
endif

if executable('fzf')
  set rtp+=/usr/local/opt/fzf
  nmap <C-P> :Files<CR>
endif

" NERDTree
nmap <silent> <C-D> :NERDTreeToggle<CR>
nmap <silent> <C-F> :NERDTreeFind<CR>

" localvimrc
let g:localvimrc_ask=0
let g:localvimrc_sandbox=0

" replace all hashrocket 1.8 style ruby hashes with 1.9 style
map :RubyHashConvert :s/\v:([^ ]+)\s*\=\>/\1:/g
nmap <leader>h :RubyHashConvert<CR>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" refresh the current buffer
nmap <leader>r :e!<CR>

" magically convert json file to pretty printed
map <leader>jt :%!python -m json.tool<CR>

" convenient mappings for vim-test
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>
